# Begin -- grammar generated by Yapps
from __future__ import print_function
import sys, re
from yapps import runtime

class CountermeauresScanner(runtime.Scanner):
    patterns = [
        ('"\\\\]"', re.compile('\\]')),
        ('","', re.compile(',')),
        ('"\\\\["', re.compile('\\[')),
        ('",noise_scale="', re.compile(',noise_scale=')),
        ('"\\\\(noise_factor="', re.compile('\\(noise_factor=')),
        ('",amplitude="', re.compile(',amplitude=')),
        ('",probability="', re.compile(',probability=')),
        ('",B="', re.compile(',B=')),
        ('"\\\\(A="', re.compile('\\(A=')),
        ('"\\\\(desync_level="', re.compile('\\(desync_level=')),
        ('"\\\\)"', re.compile('\\)')),
        ('"\\\\(jitters_level="', re.compile('\\(jitters_level=')),
        ('\\s+', re.compile('\\s+')),
        ('INUM', re.compile('[0-9]+')),
        ('FNUM', re.compile('[0-9]*\\.[0-9]+')),
        ('JITTER', re.compile('ClockJitter')),
        ('DESYNC', re.compile('Desync')),
        ('RDI', re.compile('RDI')),
        ('UNIFORM', re.compile('UniformNoise')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'\\s+':None,},str,*args,**kw)

class Countermeaures(runtime.Parser):
    Context = runtime.Context
    def countermeasure(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'countermeasure', [])
        _token = self._peek('JITTER', 'DESYNC', 'RDI', 'UNIFORM', context=_context)
        if _token == 'JITTER':
            jitter = self.jitter(_context)
            return jitter
        elif _token == 'DESYNC':
            desync = self.desync(_context)
            return desync
        elif _token == 'RDI':
            rdi = self.rdi(_context)
            return rdi
        else: # == 'UNIFORM'
            uniform = self.uniform(_context)
            return uniform

    def jitter(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'jitter', [])
        JITTER = self._scan('JITTER', context=_context)
        result = ['jitter']
        self._scan('"\\\\(jitters_level="', context=_context)
        INUM = self._scan('INUM', context=_context)
        self._scan('"\\\\)"', context=_context)
        return result + [ int(INUM) ]

    def desync(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'desync', [])
        DESYNC = self._scan('DESYNC', context=_context)
        result = ['desync']
        self._scan('"\\\\(desync_level="', context=_context)
        INUM = self._scan('INUM', context=_context)
        self._scan('"\\\\)"', context=_context)
        return result + [ int(INUM) ]

    def rdi(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'rdi', [])
        RDI = self._scan('RDI', context=_context)
        result = ['rdi']
        self._scan('"\\\\(A="', context=_context)
        INUM = self._scan('INUM', context=_context)
        result.append(int(INUM))
        self._scan('",B="', context=_context)
        INUM = self._scan('INUM', context=_context)
        result.append(int(INUM))
        self._scan('",probability="', context=_context)
        FNUM = self._scan('FNUM', context=_context)
        result.append(float(FNUM))
        self._scan('",amplitude="', context=_context)
        FNUM = self._scan('FNUM', context=_context)
        self._scan('"\\\\)"', context=_context)
        return result + [ float(FNUM) ]

    def uniform(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'uniform', [])
        UNIFORM = self._scan('UNIFORM', context=_context)
        result = ['uniform']
        self._scan('"\\\\(noise_factor="', context=_context)
        FNUM = self._scan('FNUM', context=_context)
        result.append(float(FNUM))
        self._scan('",noise_scale="', context=_context)
        FNUM = self._scan('FNUM', context=_context)
        self._scan('"\\\\)"', context=_context)
        return result + [ float(FNUM) ]

    def countermeasures(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'countermeasures', [])
        self._scan('"\\\\["', context=_context)
        result = []
        while self._peek('","', '"\\\\]"', 'JITTER', 'DESYNC', 'RDI', 'UNIFORM', context=_context) not in ['","', '"\\\\]"']:
            countermeasure = self.countermeasure(_context)
            result.append(countermeasure)
        while self._peek('"\\\\]"', '","', context=_context) == '","':
            self._scan('","', context=_context)
            countermeasure = self.countermeasure(_context)
            result.append(countermeasure)
        self._scan('"\\\\]"', context=_context)
        return result


def parse(rule, text):
    P = Countermeaures(CountermeauresScanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print(parse(argv[1], f.read()))
    else: print ('Args:  <rule> [<filename>]', file=sys.stderr)
# End -- grammar generated by Yapps
